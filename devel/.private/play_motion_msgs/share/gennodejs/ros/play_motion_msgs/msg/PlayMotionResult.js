// Auto-generated. Do not edit!

// (in-package play_motion_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class PlayMotionResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.error_code = null;
      this.error_string = null;
    }
    else {
      if (initObj.hasOwnProperty('error_code')) {
        this.error_code = initObj.error_code
      }
      else {
        this.error_code = 0;
      }
      if (initObj.hasOwnProperty('error_string')) {
        this.error_string = initObj.error_string
      }
      else {
        this.error_string = '';
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type PlayMotionResult
    // Serialize message field [error_code]
    bufferOffset = _serializer.int32(obj.error_code, buffer, bufferOffset);
    // Serialize message field [error_string]
    bufferOffset = _serializer.string(obj.error_string, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type PlayMotionResult
    let len;
    let data = new PlayMotionResult(null);
    // Deserialize message field [error_code]
    data.error_code = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [error_string]
    data.error_string = _deserializer.string(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.error_string.length;
    return length + 8;
  }

  static datatype() {
    // Returns string type for a message object
    return 'play_motion_msgs/PlayMotionResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '5560cb9a7211cb4b5a730f6f07ec124b';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    int32 error_code
    int32 SUCCEEDED             = 1
    int32 MOTION_NOT_FOUND      = -1
    # controller error codes
    int32 CONTROLLER_BUSY       = -3
    int32 MISSING_CONTROLLER    = -4
    int32 TRAJECTORY_ERROR      = -5
    int32 GOAL_NOT_REACHED      = -6
    # planner error codes
    int32 PLANNER_OFFLINE       = -7
    int32 NO_PLAN_FOUND         = -8
    #other
    int32 OTHER_ERROR           = -42
    
    string error_string
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new PlayMotionResult(null);
    if (msg.error_code !== undefined) {
      resolved.error_code = msg.error_code;
    }
    else {
      resolved.error_code = 0
    }

    if (msg.error_string !== undefined) {
      resolved.error_string = msg.error_string;
    }
    else {
      resolved.error_string = ''
    }

    return resolved;
    }
};

// Constants for message
PlayMotionResult.Constants = {
  SUCCEEDED: 1,
  MOTION_NOT_FOUND: -1,
  CONTROLLER_BUSY: -3,
  MISSING_CONTROLLER: -4,
  TRAJECTORY_ERROR: -5,
  GOAL_NOT_REACHED: -6,
  PLANNER_OFFLINE: -7,
  NO_PLAN_FOUND: -8,
  OTHER_ERROR: -42,
}

module.exports = PlayMotionResult;
