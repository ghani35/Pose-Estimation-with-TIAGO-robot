// Auto-generated. Do not edit!

// (in-package play_motion_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class PlayMotionGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.motion_name = null;
      this.skip_planning = null;
      this.priority = null;
    }
    else {
      if (initObj.hasOwnProperty('motion_name')) {
        this.motion_name = initObj.motion_name
      }
      else {
        this.motion_name = '';
      }
      if (initObj.hasOwnProperty('skip_planning')) {
        this.skip_planning = initObj.skip_planning
      }
      else {
        this.skip_planning = false;
      }
      if (initObj.hasOwnProperty('priority')) {
        this.priority = initObj.priority
      }
      else {
        this.priority = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type PlayMotionGoal
    // Serialize message field [motion_name]
    bufferOffset = _serializer.string(obj.motion_name, buffer, bufferOffset);
    // Serialize message field [skip_planning]
    bufferOffset = _serializer.bool(obj.skip_planning, buffer, bufferOffset);
    // Serialize message field [priority]
    bufferOffset = _serializer.int32(obj.priority, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type PlayMotionGoal
    let len;
    let data = new PlayMotionGoal(null);
    // Deserialize message field [motion_name]
    data.motion_name = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [skip_planning]
    data.skip_planning = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [priority]
    data.priority = _deserializer.int32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.motion_name.length;
    return length + 9;
  }

  static datatype() {
    // Returns string type for a message object
    return 'play_motion_msgs/PlayMotionGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '803175b562438759e071140087987d02';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    string motion_name
    bool skip_planning
    int32 priority
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new PlayMotionGoal(null);
    if (msg.motion_name !== undefined) {
      resolved.motion_name = msg.motion_name;
    }
    else {
      resolved.motion_name = ''
    }

    if (msg.skip_planning !== undefined) {
      resolved.skip_planning = msg.skip_planning;
    }
    else {
      resolved.skip_planning = false
    }

    if (msg.priority !== undefined) {
      resolved.priority = msg.priority;
    }
    else {
      resolved.priority = 0
    }

    return resolved;
    }
};

module.exports = PlayMotionGoal;
