# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from humanoid_nav_msgs/PlanFootstepsBetweenFeetRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import humanoid_nav_msgs.msg

class PlanFootstepsBetweenFeetRequest(genpy.Message):
  _md5sum = "a081711eb51a4a4283b2b9f345efe272"
  _type = "humanoid_nav_msgs/PlanFootstepsBetweenFeetRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """humanoid_nav_msgs/StepTarget start_left
humanoid_nav_msgs/StepTarget start_right
humanoid_nav_msgs/StepTarget goal_left
humanoid_nav_msgs/StepTarget goal_right

================================================================================
MSG: humanoid_nav_msgs/StepTarget
# Target for a single stepping motion of a humanoid's leg

geometry_msgs/Pose2D pose   # step pose as relative offset to last leg
uint8 leg                   # which leg to use (left/right, see below)

uint8 right=0               # right leg constant
uint8 left=1                # left leg constant

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['start_left','start_right','goal_left','goal_right']
  _slot_types = ['humanoid_nav_msgs/StepTarget','humanoid_nav_msgs/StepTarget','humanoid_nav_msgs/StepTarget','humanoid_nav_msgs/StepTarget']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_left,start_right,goal_left,goal_right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanFootstepsBetweenFeetRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.start_left is None:
        self.start_left = humanoid_nav_msgs.msg.StepTarget()
      if self.start_right is None:
        self.start_right = humanoid_nav_msgs.msg.StepTarget()
      if self.goal_left is None:
        self.goal_left = humanoid_nav_msgs.msg.StepTarget()
      if self.goal_right is None:
        self.goal_right = humanoid_nav_msgs.msg.StepTarget()
    else:
      self.start_left = humanoid_nav_msgs.msg.StepTarget()
      self.start_right = humanoid_nav_msgs.msg.StepTarget()
      self.goal_left = humanoid_nav_msgs.msg.StepTarget()
      self.goal_right = humanoid_nav_msgs.msg.StepTarget()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3dB3dB3dB3dB().pack(_x.start_left.pose.x, _x.start_left.pose.y, _x.start_left.pose.theta, _x.start_left.leg, _x.start_right.pose.x, _x.start_right.pose.y, _x.start_right.pose.theta, _x.start_right.leg, _x.goal_left.pose.x, _x.goal_left.pose.y, _x.goal_left.pose.theta, _x.goal_left.leg, _x.goal_right.pose.x, _x.goal_right.pose.y, _x.goal_right.pose.theta, _x.goal_right.leg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.start_left is None:
        self.start_left = humanoid_nav_msgs.msg.StepTarget()
      if self.start_right is None:
        self.start_right = humanoid_nav_msgs.msg.StepTarget()
      if self.goal_left is None:
        self.goal_left = humanoid_nav_msgs.msg.StepTarget()
      if self.goal_right is None:
        self.goal_right = humanoid_nav_msgs.msg.StepTarget()
      end = 0
      _x = self
      start = end
      end += 100
      (_x.start_left.pose.x, _x.start_left.pose.y, _x.start_left.pose.theta, _x.start_left.leg, _x.start_right.pose.x, _x.start_right.pose.y, _x.start_right.pose.theta, _x.start_right.leg, _x.goal_left.pose.x, _x.goal_left.pose.y, _x.goal_left.pose.theta, _x.goal_left.leg, _x.goal_right.pose.x, _x.goal_right.pose.y, _x.goal_right.pose.theta, _x.goal_right.leg,) = _get_struct_3dB3dB3dB3dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3dB3dB3dB3dB().pack(_x.start_left.pose.x, _x.start_left.pose.y, _x.start_left.pose.theta, _x.start_left.leg, _x.start_right.pose.x, _x.start_right.pose.y, _x.start_right.pose.theta, _x.start_right.leg, _x.goal_left.pose.x, _x.goal_left.pose.y, _x.goal_left.pose.theta, _x.goal_left.leg, _x.goal_right.pose.x, _x.goal_right.pose.y, _x.goal_right.pose.theta, _x.goal_right.leg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.start_left is None:
        self.start_left = humanoid_nav_msgs.msg.StepTarget()
      if self.start_right is None:
        self.start_right = humanoid_nav_msgs.msg.StepTarget()
      if self.goal_left is None:
        self.goal_left = humanoid_nav_msgs.msg.StepTarget()
      if self.goal_right is None:
        self.goal_right = humanoid_nav_msgs.msg.StepTarget()
      end = 0
      _x = self
      start = end
      end += 100
      (_x.start_left.pose.x, _x.start_left.pose.y, _x.start_left.pose.theta, _x.start_left.leg, _x.start_right.pose.x, _x.start_right.pose.y, _x.start_right.pose.theta, _x.start_right.leg, _x.goal_left.pose.x, _x.goal_left.pose.y, _x.goal_left.pose.theta, _x.goal_left.leg, _x.goal_right.pose.x, _x.goal_right.pose.y, _x.goal_right.pose.theta, _x.goal_right.leg,) = _get_struct_3dB3dB3dB3dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3dB3dB3dB3dB = None
def _get_struct_3dB3dB3dB3dB():
    global _struct_3dB3dB3dB3dB
    if _struct_3dB3dB3dB3dB is None:
        _struct_3dB3dB3dB3dB = struct.Struct("<3dB3dB3dB3dB")
    return _struct_3dB3dB3dB3dB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from humanoid_nav_msgs/PlanFootstepsBetweenFeetResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import humanoid_nav_msgs.msg

class PlanFootstepsBetweenFeetResponse(genpy.Message):
  _md5sum = "1af07cd1d4ffe34a9a731e87aa13835c"
  _type = "humanoid_nav_msgs/PlanFootstepsBetweenFeetResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool result
humanoid_nav_msgs/StepTarget[] footsteps
float64 costs
float64 final_eps
float64 planning_time
int64 expanded_states


================================================================================
MSG: humanoid_nav_msgs/StepTarget
# Target for a single stepping motion of a humanoid's leg

geometry_msgs/Pose2D pose   # step pose as relative offset to last leg
uint8 leg                   # which leg to use (left/right, see below)

uint8 right=0               # right leg constant
uint8 left=1                # left leg constant

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['result','footsteps','costs','final_eps','planning_time','expanded_states']
  _slot_types = ['bool','humanoid_nav_msgs/StepTarget[]','float64','float64','float64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,footsteps,costs,final_eps,planning_time,expanded_states

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanFootstepsBetweenFeetResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
      if self.footsteps is None:
        self.footsteps = []
      if self.costs is None:
        self.costs = 0.
      if self.final_eps is None:
        self.final_eps = 0.
      if self.planning_time is None:
        self.planning_time = 0.
      if self.expanded_states is None:
        self.expanded_states = 0
    else:
      self.result = False
      self.footsteps = []
      self.costs = 0.
      self.final_eps = 0.
      self.planning_time = 0.
      self.expanded_states = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
      length = len(self.footsteps)
      buff.write(_struct_I.pack(length))
      for val1 in self.footsteps:
        _v1 = val1.pose
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.leg
        buff.write(_get_struct_B().pack(_x))
      _x = self
      buff.write(_get_struct_3dq().pack(_x.costs, _x.final_eps, _x.planning_time, _x.expanded_states))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.footsteps is None:
        self.footsteps = None
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.footsteps = []
      for i in range(0, length):
        val1 = humanoid_nav_msgs.msg.StepTarget()
        _v2 = val1.pose
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.leg,) = _get_struct_B().unpack(str[start:end])
        self.footsteps.append(val1)
      _x = self
      start = end
      end += 32
      (_x.costs, _x.final_eps, _x.planning_time, _x.expanded_states,) = _get_struct_3dq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
      length = len(self.footsteps)
      buff.write(_struct_I.pack(length))
      for val1 in self.footsteps:
        _v3 = val1.pose
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.leg
        buff.write(_get_struct_B().pack(_x))
      _x = self
      buff.write(_get_struct_3dq().pack(_x.costs, _x.final_eps, _x.planning_time, _x.expanded_states))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.footsteps is None:
        self.footsteps = None
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.footsteps = []
      for i in range(0, length):
        val1 = humanoid_nav_msgs.msg.StepTarget()
        _v4 = val1.pose
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.leg,) = _get_struct_B().unpack(str[start:end])
        self.footsteps.append(val1)
      _x = self
      start = end
      end += 32
      (_x.costs, _x.final_eps, _x.planning_time, _x.expanded_states,) = _get_struct_3dq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3dq = None
def _get_struct_3dq():
    global _struct_3dq
    if _struct_3dq is None:
        _struct_3dq = struct.Struct("<3dq")
    return _struct_3dq
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class PlanFootstepsBetweenFeet(object):
  _type          = 'humanoid_nav_msgs/PlanFootstepsBetweenFeet'
  _md5sum = 'a4b63c1d84c3783139a04f9abafe7214'
  _request_class  = PlanFootstepsBetweenFeetRequest
  _response_class = PlanFootstepsBetweenFeetResponse
