;; Auto-generated. Do not edit!


(when (boundp 'humanoid_nav_msgs::ExecFootstepsGoal)
  (if (not (find-package "HUMANOID_NAV_MSGS"))
    (make-package "HUMANOID_NAV_MSGS"))
  (shadow 'ExecFootstepsGoal (find-package "HUMANOID_NAV_MSGS")))
(unless (find-package "HUMANOID_NAV_MSGS::EXECFOOTSTEPSGOAL")
  (make-package "HUMANOID_NAV_MSGS::EXECFOOTSTEPSGOAL"))

(in-package "ROS")
;;//! \htmlinclude ExecFootstepsGoal.msg.html


(defclass humanoid_nav_msgs::ExecFootstepsGoal
  :super ros::object
  :slots (_footsteps _feedback_frequency ))

(defmethod humanoid_nav_msgs::ExecFootstepsGoal
  (:init
   (&key
    ((:footsteps __footsteps) (let (r) (dotimes (i 0) (push (instance humanoid_nav_msgs::StepTarget :init) r)) r))
    ((:feedback_frequency __feedback_frequency) 0.0)
    )
   (send-super :init)
   (setq _footsteps __footsteps)
   (setq _feedback_frequency (float __feedback_frequency))
   self)
  (:footsteps
   (&rest __footsteps)
   (if (keywordp (car __footsteps))
       (send* _footsteps __footsteps)
     (progn
       (if __footsteps (setq _footsteps (car __footsteps)))
       _footsteps)))
  (:feedback_frequency
   (&optional __feedback_frequency)
   (if __feedback_frequency (setq _feedback_frequency __feedback_frequency)) _feedback_frequency)
  (:serialization-length
   ()
   (+
    ;; humanoid_nav_msgs/StepTarget[] _footsteps
    (apply #'+ (send-all _footsteps :serialization-length)) 4
    ;; float64 _feedback_frequency
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; humanoid_nav_msgs/StepTarget[] _footsteps
     (write-long (length _footsteps) s)
     (dolist (elem _footsteps)
       (send elem :serialize s)
       )
     ;; float64 _feedback_frequency
       (sys::poke _feedback_frequency (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; humanoid_nav_msgs/StepTarget[] _footsteps
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _footsteps (let (r) (dotimes (i n) (push (instance humanoid_nav_msgs::StepTarget :init) r)) r))
     (dolist (elem- _footsteps)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;; float64 _feedback_frequency
     (setq _feedback_frequency (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get humanoid_nav_msgs::ExecFootstepsGoal :md5sum-) "40a3f8092ef3bb49c3253baa6eb94932")
(setf (get humanoid_nav_msgs::ExecFootstepsGoal :datatype-) "humanoid_nav_msgs/ExecFootstepsGoal")
(setf (get humanoid_nav_msgs::ExecFootstepsGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
humanoid_nav_msgs/StepTarget[] footsteps
float64 feedback_frequency

================================================================================
MSG: humanoid_nav_msgs/StepTarget
# Target for a single stepping motion of a humanoid's leg

geometry_msgs/Pose2D pose   # step pose as relative offset to last leg
uint8 leg                   # which leg to use (left/right, see below)

uint8 right=0               # right leg constant
uint8 left=1                # left leg constant

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

")



(provide :humanoid_nav_msgs/ExecFootstepsGoal "40a3f8092ef3bb49c3253baa6eb94932")


