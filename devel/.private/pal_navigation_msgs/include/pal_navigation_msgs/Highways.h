// Generated by gencpp from file pal_navigation_msgs/Highways.msg
// DO NOT EDIT!


#ifndef PAL_NAVIGATION_MSGS_MESSAGE_HIGHWAYS_H
#define PAL_NAVIGATION_MSGS_MESSAGE_HIGHWAYS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Float32.h>

namespace pal_navigation_msgs
{
template <class ContainerAllocator>
struct Highways_
{
  typedef Highways_<ContainerAllocator> Type;

  Highways_()
    : points()
    , directional()
    , line_width()  {
    }
  Highways_(const ContainerAllocator& _alloc)
    : points(_alloc)
    , directional(_alloc)
    , line_width(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _directional_type;
  _directional_type directional;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _line_width_type;
  _line_width_type line_width;





  typedef boost::shared_ptr< ::pal_navigation_msgs::Highways_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_navigation_msgs::Highways_<ContainerAllocator> const> ConstPtr;

}; // struct Highways_

typedef ::pal_navigation_msgs::Highways_<std::allocator<void> > Highways;

typedef boost::shared_ptr< ::pal_navigation_msgs::Highways > HighwaysPtr;
typedef boost::shared_ptr< ::pal_navigation_msgs::Highways const> HighwaysConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_navigation_msgs::Highways_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_navigation_msgs::Highways_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_navigation_msgs::Highways_<ContainerAllocator1> & lhs, const ::pal_navigation_msgs::Highways_<ContainerAllocator2> & rhs)
{
  return lhs.points == rhs.points &&
    lhs.directional == rhs.directional &&
    lhs.line_width == rhs.line_width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_navigation_msgs::Highways_<ContainerAllocator1> & lhs, const ::pal_navigation_msgs::Highways_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pal_navigation_msgs::Highways_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_navigation_msgs::Highways_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_navigation_msgs::Highways_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_navigation_msgs::Highways_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_navigation_msgs::Highways_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_navigation_msgs::Highways_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_navigation_msgs::Highways_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fcab856f9580314bb9a7fc212a82e7a6";
  }

  static const char* value(const ::pal_navigation_msgs::Highways_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfcab856f9580314bULL;
  static const uint64_t static_value2 = 0xb9a7fc212a82e7a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_navigation_msgs::Highways_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_navigation_msgs/Highways";
  }

  static const char* value(const ::pal_navigation_msgs::Highways_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_navigation_msgs::Highways_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Poi (Point of interest)\n"
"\n"
"geometry_msgs/Point[] points\n"
"\n"
"std_msgs/Bool         directional\n"
"\n"
"std_msgs/Float32      line_width\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::pal_navigation_msgs::Highways_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_navigation_msgs::Highways_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
      stream.next(m.directional);
      stream.next(m.line_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Highways_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_navigation_msgs::Highways_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_navigation_msgs::Highways_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "directional: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.directional);
    s << indent << "line_width: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.line_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_NAVIGATION_MSGS_MESSAGE_HIGHWAYS_H
