# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dynamic_introspection/IntrospectionMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dynamic_introspection.msg
import genpy
import geometry_msgs.msg
import std_msgs.msg
import visualization_msgs.msg

class IntrospectionMsg(genpy.Message):
  _md5sum = "abf14c63c888d80e823c2b0710f2d3a3"
  _type = "dynamic_introspection/IntrospectionMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
BoolParameter[] bools
DoubleParameter[] doubles
IntParameter[] ints

MarkerParameter[] markers


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: dynamic_introspection/BoolParameter
string name
bool value

================================================================================
MSG: dynamic_introspection/DoubleParameter
string name
float64 value

================================================================================
MSG: dynamic_introspection/IntParameter
string name
int32 value

================================================================================
MSG: dynamic_introspection/MarkerParameter
string name
visualization_msgs/MarkerArray value

================================================================================
MSG: visualization_msgs/MarkerArray
Marker[] markers

================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

uint8 ARROW=0
uint8 CUBE=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 LINE_STRIP=4
uint8 LINE_LIST=5
uint8 CUBE_LIST=6
uint8 SPHERE_LIST=7
uint8 POINTS=8
uint8 TEXT_VIEW_FACING=9
uint8 MESH_RESOURCE=10
uint8 TRIANGLE_LIST=11

uint8 ADD=0
uint8 MODIFY=0
uint8 DELETE=2
uint8 DELETEALL=3

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['header','bools','doubles','ints','markers']
  _slot_types = ['std_msgs/Header','dynamic_introspection/BoolParameter[]','dynamic_introspection/DoubleParameter[]','dynamic_introspection/IntParameter[]','dynamic_introspection/MarkerParameter[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,bools,doubles,ints,markers

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IntrospectionMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bools is None:
        self.bools = []
      if self.doubles is None:
        self.doubles = []
      if self.ints is None:
        self.ints = []
      if self.markers is None:
        self.markers = []
    else:
      self.header = std_msgs.msg.Header()
      self.bools = []
      self.doubles = []
      self.ints = []
      self.markers = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.bools)
      buff.write(_struct_I.pack(length))
      for val1 in self.bools:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        buff.write(_get_struct_B().pack(_x))
      length = len(self.doubles)
      buff.write(_struct_I.pack(length))
      for val1 in self.doubles:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        buff.write(_get_struct_d().pack(_x))
      length = len(self.ints)
      buff.write(_struct_I.pack(length))
      for val1 in self.ints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        buff.write(_get_struct_i().pack(_x))
      length = len(self.markers)
      buff.write(_struct_I.pack(length))
      for val1 in self.markers:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.value
        length = len(_v1.markers)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.markers:
          _v2 = val3.header
          _x = _v2.seq
          buff.write(_get_struct_I().pack(_x))
          _v3 = _v2.stamp
          _x = _v3
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v2.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.ns
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
          _v4 = val3.pose
          _v5 = _v4.position
          _x = _v5
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v6 = _v4.orientation
          _x = _v6
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v7 = val3.scale
          _x = _v7
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v8 = val3.color
          _x = _v8
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _v9 = val3.lifetime
          _x = _v9
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val3.frame_locked
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.points)
          buff.write(_struct_I.pack(length))
          for val4 in val3.points:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.colors)
          buff.write(_struct_I.pack(length))
          for val4 in val3.colors:
            _x = val4
            buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _x = val3.text
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.mesh_resource
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.mesh_use_embedded_materials
          buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bools is None:
        self.bools = None
      if self.doubles is None:
        self.doubles = None
      if self.ints is None:
        self.ints = None
      if self.markers is None:
        self.markers = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bools = []
      for i in range(0, length):
        val1 = dynamic_introspection.msg.BoolParameter()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 1
        (val1.value,) = _get_struct_B().unpack(str[start:end])
        val1.value = bool(val1.value)
        self.bools.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.doubles = []
      for i in range(0, length):
        val1 = dynamic_introspection.msg.DoubleParameter()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 8
        (val1.value,) = _get_struct_d().unpack(str[start:end])
        self.doubles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ints = []
      for i in range(0, length):
        val1 = dynamic_introspection.msg.IntParameter()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (val1.value,) = _get_struct_i().unpack(str[start:end])
        self.ints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.markers = []
      for i in range(0, length):
        val1 = dynamic_introspection.msg.MarkerParameter()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v10 = val1.value
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v10.markers = []
        for i in range(0, length):
          val3 = visualization_msgs.msg.Marker()
          _v11 = val3.header
          start = end
          end += 4
          (_v11.seq,) = _get_struct_I().unpack(str[start:end])
          _v12 = _v11.stamp
          _x = _v12
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v11.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v11.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.ns = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.ns = str[start:end]
          _x = val3
          start = end
          end += 12
          (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
          _v13 = val3.pose
          _v14 = _v13.position
          _x = _v14
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v15 = _v13.orientation
          _x = _v15
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v16 = val3.scale
          _x = _v16
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v17 = val3.color
          _x = _v17
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v18 = val3.lifetime
          _x = _v18
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val3.frame_locked,) = _get_struct_B().unpack(str[start:end])
          val3.frame_locked = bool(val3.frame_locked)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.colors = []
          for i in range(0, length):
            val4 = std_msgs.msg.ColorRGBA()
            _x = val4
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
            val3.colors.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.text = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.text = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.mesh_resource = str[start:end]
          start = end
          end += 1
          (val3.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
          val3.mesh_use_embedded_materials = bool(val3.mesh_use_embedded_materials)
          _v10.markers.append(val3)
        self.markers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.bools)
      buff.write(_struct_I.pack(length))
      for val1 in self.bools:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        buff.write(_get_struct_B().pack(_x))
      length = len(self.doubles)
      buff.write(_struct_I.pack(length))
      for val1 in self.doubles:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        buff.write(_get_struct_d().pack(_x))
      length = len(self.ints)
      buff.write(_struct_I.pack(length))
      for val1 in self.ints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        buff.write(_get_struct_i().pack(_x))
      length = len(self.markers)
      buff.write(_struct_I.pack(length))
      for val1 in self.markers:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v19 = val1.value
        length = len(_v19.markers)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.markers:
          _v20 = val3.header
          _x = _v20.seq
          buff.write(_get_struct_I().pack(_x))
          _v21 = _v20.stamp
          _x = _v21
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v20.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.ns
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
          _v22 = val3.pose
          _v23 = _v22.position
          _x = _v23
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v24 = _v22.orientation
          _x = _v24
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v25 = val3.scale
          _x = _v25
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v26 = val3.color
          _x = _v26
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _v27 = val3.lifetime
          _x = _v27
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val3.frame_locked
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.points)
          buff.write(_struct_I.pack(length))
          for val4 in val3.points:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.colors)
          buff.write(_struct_I.pack(length))
          for val4 in val3.colors:
            _x = val4
            buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _x = val3.text
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.mesh_resource
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.mesh_use_embedded_materials
          buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bools is None:
        self.bools = None
      if self.doubles is None:
        self.doubles = None
      if self.ints is None:
        self.ints = None
      if self.markers is None:
        self.markers = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bools = []
      for i in range(0, length):
        val1 = dynamic_introspection.msg.BoolParameter()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 1
        (val1.value,) = _get_struct_B().unpack(str[start:end])
        val1.value = bool(val1.value)
        self.bools.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.doubles = []
      for i in range(0, length):
        val1 = dynamic_introspection.msg.DoubleParameter()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 8
        (val1.value,) = _get_struct_d().unpack(str[start:end])
        self.doubles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ints = []
      for i in range(0, length):
        val1 = dynamic_introspection.msg.IntParameter()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (val1.value,) = _get_struct_i().unpack(str[start:end])
        self.ints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.markers = []
      for i in range(0, length):
        val1 = dynamic_introspection.msg.MarkerParameter()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v28 = val1.value
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v28.markers = []
        for i in range(0, length):
          val3 = visualization_msgs.msg.Marker()
          _v29 = val3.header
          start = end
          end += 4
          (_v29.seq,) = _get_struct_I().unpack(str[start:end])
          _v30 = _v29.stamp
          _x = _v30
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v29.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v29.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.ns = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.ns = str[start:end]
          _x = val3
          start = end
          end += 12
          (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
          _v31 = val3.pose
          _v32 = _v31.position
          _x = _v32
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v33 = _v31.orientation
          _x = _v33
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v34 = val3.scale
          _x = _v34
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v35 = val3.color
          _x = _v35
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v36 = val3.lifetime
          _x = _v36
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val3.frame_locked,) = _get_struct_B().unpack(str[start:end])
          val3.frame_locked = bool(val3.frame_locked)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.colors = []
          for i in range(0, length):
            val4 = std_msgs.msg.ColorRGBA()
            _x = val4
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
            val3.colors.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.text = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.text = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.mesh_resource = str[start:end]
          start = end
          end += 1
          (val3.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
          val3.mesh_use_embedded_materials = bool(val3.mesh_use_embedded_materials)
          _v28.markers.append(val3)
        self.markers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
