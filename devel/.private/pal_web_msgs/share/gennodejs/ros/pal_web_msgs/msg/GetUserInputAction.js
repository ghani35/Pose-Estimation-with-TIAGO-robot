// Auto-generated. Do not edit!

// (in-package pal_web_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let GetUserInputActionGoal = require('./GetUserInputActionGoal.js');
let GetUserInputActionResult = require('./GetUserInputActionResult.js');
let GetUserInputActionFeedback = require('./GetUserInputActionFeedback.js');

//-----------------------------------------------------------

class GetUserInputAction {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new GetUserInputActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new GetUserInputActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new GetUserInputActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type GetUserInputAction
    // Serialize message field [action_goal]
    bufferOffset = GetUserInputActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = GetUserInputActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = GetUserInputActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type GetUserInputAction
    let len;
    let data = new GetUserInputAction(null);
    // Deserialize message field [action_goal]
    data.action_goal = GetUserInputActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = GetUserInputActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = GetUserInputActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += GetUserInputActionGoal.getMessageSize(object.action_goal);
    length += GetUserInputActionResult.getMessageSize(object.action_result);
    length += GetUserInputActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'pal_web_msgs/GetUserInputAction';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '3077573b69391fd19655d35442f74185';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    GetUserInputActionGoal action_goal
    GetUserInputActionResult action_result
    GetUserInputActionFeedback action_feedback
    
    ================================================================================
    MSG: pal_web_msgs/GetUserInputActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    GetUserInputGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: pal_web_msgs/GetUserInputGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    pal_web_msgs/WebGoTo web_go_to # Web to display for requesting feedback
    pal_interaction_msgs/TtsGoal question_tts # TTS question, asked before waiting for feedback
    string[] valid_asr_inputs # empty is no ASR, can be regex
    string asr_language # empty is current default
    duration asr_timeout
    bool retry_asr
    pal_interaction_msgs/TtsGoal retry_tts # If retrying, say this setence
    bool wait_for_interaction # If true, wait for an interaction before starting the ASR
    
    ================================================================================
    MSG: pal_web_msgs/WebGoTo
    uint8 IMAGE = 0
    uint8 VIDEO = 1
    uint8 URI   = 2
    uint8 URL = 3
    uint8 TOUCH_PAGE = 4
    uint8 type # one of the enum above
    
    string value # Destination (an image, a video or a uri)
    
    ================================================================================
    MSG: pal_interaction_msgs/TtsGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    ## goal definition
    
    # utterance will contain indications to construct
    # the text to be spoken.
    # It must be specified in a section/key format 
    # for internationalisation. The actual text will
    # be obtained from configuration files as in pal_tts_cfg pkg.
     
    I18nText text
    TtsText rawtext
    
    # This is to suggest a voice name to the 
    # tts engine. For the same language we might have
    # a variety of voices available, and this variable 
    # is to choose one among them. 
    # (not implemented yet)
    string speakerName
    
    # Time to wait before synthesising the text itself.
    # It can be used to produced delayed speech.
    float64 wait_before_speaking
    
    
    ================================================================================
    MSG: pal_interaction_msgs/I18nText
    # section/key is used as in examples in the pal_tts_cfg pkg.
    string section
    string key
    
    # language id, must be speficied using RFC 3066
    string lang_id
    
    # arguments contain the values by which 
    # occurrences of '%s' will be replaced in the 
    # main text.
    # This only supports up to 2 arguments and no recursion.
    # However, recursion and more argumnents are
    # planned to be supported in the future.
    I18nArgument[] arguments
    
    ================================================================================
    MSG: pal_interaction_msgs/I18nArgument
    # section key, override the value in expanded.
    # Use expanded for text that do not need expansion.
    # Please note that expanded here will not be translated 
    # to any language.
    
    string section
    string key
    string expanded
    
    
    ================================================================================
    MSG: pal_interaction_msgs/TtsText
    # this message is to specify 
    # raw text to the TTS server. 
    
    string text
    
    # Language id in RFC 3066 format
    # This field is mandatory
    string lang_id
    ================================================================================
    MSG: pal_web_msgs/GetUserInputActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    GetUserInputResult result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: pal_web_msgs/GetUserInputResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    pal_interaction_msgs/Input input
    
    ================================================================================
    MSG: pal_interaction_msgs/Input
    #action to perform
    string INPUT_ACCEPT = INPUT_ACCEPT
    string INPUT_REJECT = INPUT_REJECT
    string INPUT_CANCEL = INPUT_CANCEL
    
    # Deprecated in favor of the INPUT_* above. Will be removed in a future message
    string OK = ok
    string YES = yes
    string NO = no
    string CANCEL = cancel
    string ABORT = abort
    
    # Can be any of the above, and additionally any custom action you want
    string action
    
    InputArgument[] args
    
    ================================================================================
    MSG: pal_interaction_msgs/InputArgument
    string key
    string value
    
    ================================================================================
    MSG: pal_web_msgs/GetUserInputActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    GetUserInputFeedback feedback
    
    ================================================================================
    MSG: pal_web_msgs/GetUserInputFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new GetUserInputAction(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = GetUserInputActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new GetUserInputActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = GetUserInputActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new GetUserInputActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = GetUserInputActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new GetUserInputActionFeedback()
    }

    return resolved;
    }
};

module.exports = GetUserInputAction;
