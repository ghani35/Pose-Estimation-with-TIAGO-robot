;; Auto-generated. Do not edit!


(when (boundp 'pal_web_msgs::GetUserInputActionGoal)
  (if (not (find-package "PAL_WEB_MSGS"))
    (make-package "PAL_WEB_MSGS"))
  (shadow 'GetUserInputActionGoal (find-package "PAL_WEB_MSGS")))
(unless (find-package "PAL_WEB_MSGS::GETUSERINPUTACTIONGOAL")
  (make-package "PAL_WEB_MSGS::GETUSERINPUTACTIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude GetUserInputActionGoal.msg.html
(if (not (find-package "ACTIONLIB_MSGS"))
  (ros::roseus-add-msgs "actionlib_msgs"))
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))


(defclass pal_web_msgs::GetUserInputActionGoal
  :super ros::object
  :slots (_header _goal_id _goal ))

(defmethod pal_web_msgs::GetUserInputActionGoal
  (:init
   (&key
    ((:header __header) (instance std_msgs::Header :init))
    ((:goal_id __goal_id) (instance actionlib_msgs::GoalID :init))
    ((:goal __goal) (instance pal_web_msgs::GetUserInputGoal :init))
    )
   (send-super :init)
   (setq _header __header)
   (setq _goal_id __goal_id)
   (setq _goal __goal)
   self)
  (:header
   (&rest __header)
   (if (keywordp (car __header))
       (send* _header __header)
     (progn
       (if __header (setq _header (car __header)))
       _header)))
  (:goal_id
   (&rest __goal_id)
   (if (keywordp (car __goal_id))
       (send* _goal_id __goal_id)
     (progn
       (if __goal_id (setq _goal_id (car __goal_id)))
       _goal_id)))
  (:goal
   (&rest __goal)
   (if (keywordp (car __goal))
       (send* _goal __goal)
     (progn
       (if __goal (setq _goal (car __goal)))
       _goal)))
  (:serialization-length
   ()
   (+
    ;; std_msgs/Header _header
    (send _header :serialization-length)
    ;; actionlib_msgs/GoalID _goal_id
    (send _goal_id :serialization-length)
    ;; pal_web_msgs/GetUserInputGoal _goal
    (send _goal :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; std_msgs/Header _header
       (send _header :serialize s)
     ;; actionlib_msgs/GoalID _goal_id
       (send _goal_id :serialize s)
     ;; pal_web_msgs/GetUserInputGoal _goal
       (send _goal :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; std_msgs/Header _header
     (send _header :deserialize buf ptr-) (incf ptr- (send _header :serialization-length))
   ;; actionlib_msgs/GoalID _goal_id
     (send _goal_id :deserialize buf ptr-) (incf ptr- (send _goal_id :serialization-length))
   ;; pal_web_msgs/GetUserInputGoal _goal
     (send _goal :deserialize buf ptr-) (incf ptr- (send _goal :serialization-length))
   ;;
   self)
  )

(setf (get pal_web_msgs::GetUserInputActionGoal :md5sum-) "6187ed7f15bf16fb2deefdc64aa97360")
(setf (get pal_web_msgs::GetUserInputActionGoal :datatype-) "pal_web_msgs/GetUserInputActionGoal")
(setf (get pal_web_msgs::GetUserInputActionGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
GetUserInputGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: pal_web_msgs/GetUserInputGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
pal_web_msgs/WebGoTo web_go_to # Web to display for requesting feedback
pal_interaction_msgs/TtsGoal question_tts # TTS question, asked before waiting for feedback
string[] valid_asr_inputs # empty is no ASR, can be regex
string asr_language # empty is current default
duration asr_timeout
bool retry_asr
pal_interaction_msgs/TtsGoal retry_tts # If retrying, say this setence
bool wait_for_interaction # If true, wait for an interaction before starting the ASR

================================================================================
MSG: pal_web_msgs/WebGoTo
uint8 IMAGE = 0
uint8 VIDEO = 1
uint8 URI   = 2
uint8 URL = 3
uint8 TOUCH_PAGE = 4
uint8 type # one of the enum above

string value # Destination (an image, a video or a uri)

================================================================================
MSG: pal_interaction_msgs/TtsGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
## goal definition

# utterance will contain indications to construct
# the text to be spoken.
# It must be specified in a section/key format 
# for internationalisation. The actual text will
# be obtained from configuration files as in pal_tts_cfg pkg.
 
I18nText text
TtsText rawtext

# This is to suggest a voice name to the 
# tts engine. For the same language we might have
# a variety of voices available, and this variable 
# is to choose one among them. 
# (not implemented yet)
string speakerName

# Time to wait before synthesising the text itself.
# It can be used to produced delayed speech.
float64 wait_before_speaking


================================================================================
MSG: pal_interaction_msgs/I18nText
# section/key is used as in examples in the pal_tts_cfg pkg.
string section
string key

# language id, must be speficied using RFC 3066
string lang_id

# arguments contain the values by which 
# occurrences of '%s' will be replaced in the 
# main text.
# This only supports up to 2 arguments and no recursion.
# However, recursion and more argumnents are
# planned to be supported in the future.
I18nArgument[] arguments

================================================================================
MSG: pal_interaction_msgs/I18nArgument
# section key, override the value in expanded.
# Use expanded for text that do not need expansion.
# Please note that expanded here will not be translated 
# to any language.

string section
string key
string expanded


================================================================================
MSG: pal_interaction_msgs/TtsText
# this message is to specify 
# raw text to the TTS server. 

string text

# Language id in RFC 3066 format
# This field is mandatory
string lang_id
")



(provide :pal_web_msgs/GetUserInputActionGoal "6187ed7f15bf16fb2deefdc64aa97360")


