# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~xy_goal_tolerance
0.default= 0.1
0.type= double
0.desc=Distance tolerance for reaching the goal pose Range: 0.0 to std::numeric_limits<double>::infinity()
1.name= ~yaw_goal_tolerance
1.default= 0.05
1.type= double
1.desc=Orientation tolerance for reaching the desired goal pose Range: 0.0 to std::numeric_limits<double>::infinity()
2.name= ~rot_stopped_vel
2.default= 0.01
2.type= double
2.desc=Angular velocity lower bound that determines if the robot should stop to avoid limit-cycles or locks Range: 0.0 to std::numeric_limits<double>::infinity()
3.name= ~trans_stopped_vel
3.default= 0.01
3.type= double
3.desc=Linear velocity lower bound that determines if the robot should stop to avoid limit-cycles or locks Range: 0.0 to std::numeric_limits<double>::infinity()
4.name= ~marker_lifetime
4.default= 0.5
4.type= double
4.desc=Lifetime of eband visualization markers Range: 0.0 to std::numeric_limits<double>::infinity()
5.name= ~eband_min_relative_overlap
5.default= 0.7
5.type= double
5.desc=Min distance that denotes connectivity between consecutive bubbles Range: 0.0 to std::numeric_limits<double>::infinity()
6.name= ~eband_tiny_bubble_distance
6.default= 0.01
6.type= double
6.desc=Bubble geometric bound regarding tiny bubble distance Range: 0.0 to std::numeric_limits<double>::infinity()
7.name= ~eband_tiny_bubble_expansion
7.default= 0.01
7.type= double
7.desc=Bubble geometric bound regarding tiny bubble expansion Range: 0.0 to std::numeric_limits<double>::infinity()
8.name= ~eband_internal_force_gain
8.default= 1.0
8.type= double
8.desc=Force gain of forces between consecutive bubbles that tend to stretch the elastic band Range: 0.0 to std::numeric_limits<double>::infinity()
9.name= ~eband_external_force_gain
9.default= 2.0
9.type= double
9.desc=Force gain of forces that tend to move the bubbles away from obstacles Range: 0.0 to std::numeric_limits<double>::infinity()
10.name= ~num_iterations_eband_optimization
10.default= 3
10.type= int
10.desc=Number of iterations for eband optimization Range: 1 to 2147483647
11.name= ~eband_equilibrium_approx_max_recursion_depth
11.default= 4
11.type= int
11.desc=Number of iterations for reaching the equilibrium between internal and external forces Range: 1 to 2147483647
12.name= ~eband_equilibrium_relative_overshoot
12.default= 0.75
12.type= double
12.desc=Maximum relative equlibrium overshoot Range: 0.0 to std::numeric_limits<double>::infinity()
13.name= ~eband_significant_force_lower_bound
13.default= 0.15
13.type= double
13.desc=Minimum magnitude of force that is considered significant and used in the calculations Range: 0.0 to std::numeric_limits<double>::infinity()
14.name= ~costmap_weight
14.default= 10.0
14.type= double
14.desc=Costmap weight factor used in the calculation of distance to obstacles Range: 0.0 to std::numeric_limits<double>::infinity()
15.name= ~max_vel_lin
15.default= 0.75
15.type= double
15.desc=Maximum linear velocity Range: 0.0 to std::numeric_limits<double>::infinity()
16.name= ~max_vel_th
16.default= 1.0
16.type= double
16.desc=Maximum angular velocity Range: 0.0 to std::numeric_limits<double>::infinity()
17.name= ~min_vel_lin
17.default= 0.1
17.type= double
17.desc=Minimum linear velocity Range: 0.0 to std::numeric_limits<double>::infinity()
18.name= ~min_vel_th
18.default= 0.0
18.type= double
18.desc=Minimum angular velocity Range: 0.0 to std::numeric_limits<double>::infinity()
19.name= ~min_in_place_vel_th
19.default= 0.0
19.type= double
19.desc=Minimum in-place angular velocity Range: 0.0 to std::numeric_limits<double>::infinity()
20.name= ~in_place_trans_vel
20.default= 0.0
20.type= double
20.desc=Minimum in place linear velocity Range: 0.0 to std::numeric_limits<double>::infinity()
21.name= ~k_prop
21.default= 4.0
21.type= double
21.desc=Proportional gain of the PID controller Range: 0.0 to std::numeric_limits<double>::infinity()
22.name= ~k_damp
22.default= 3.5
22.type= double
22.desc=Damping gain of the PID controller Range: 0.0 to std::numeric_limits<double>::infinity()
23.name= ~Ctrl_Rate
23.default= 10.0
23.type= double
23.desc=Control rate Range: 0.0 to std::numeric_limits<double>::infinity()
24.name= ~max_acceleration
24.default= 0.5
24.type= double
24.desc=Maximum allowable acceleration Range: 0.0 to std::numeric_limits<double>::infinity()
25.name= ~virtual_mass
25.default= 0.75
25.type= double
25.desc=Virtual mass Range: 0.0 to std::numeric_limits<double>::infinity()
26.name= ~max_translational_acceleration
26.default= 0.5
26.type= double
26.desc=Maximum linear acceleration Range: 0.0 to std::numeric_limits<double>::infinity()
27.name= ~max_rotational_acceleration
27.default= 1.5
27.type= double
27.desc=Maximum angular acceleration Range: 0.0 to std::numeric_limits<double>::infinity()
28.name= ~rotation_correction_threshold
28.default= 0.5
28.type= double
28.desc=Rotation correction threshold Range: 0.0 to std::numeric_limits<double>::infinity()
29.name= ~differential_drive
29.default= True
29.type= bool
29.desc=Denotes whether to use the differential drive hack 
30.name= ~bubble_velocity_multiplier
30.default= 2.0
30.type= double
30.desc=Multiplier of bubble radius Range: 0.0 to std::numeric_limits<double>::infinity()
31.name= ~rotation_threshold_multiplier
31.default= 1.0
31.type= double
31.desc=Multiplier of rotation threshold Range: 0.0 to std::numeric_limits<double>::infinity()
32.name= ~disallow_hysteresis
32.default= False
32.type= bool
32.desc=Determines whether to try getting closer to the goal, in case of going past the tolerance 
}
}
# End of autogenerated section. You may edit below.
